{
    "pipes": [],
    "interfaces": [
        {
            "name": "Image",
            "id": "interface-Image-88b40faba9eb39ff7e748bf902849a83",
            "file": "src/app/posts/model/image.ts",
            "type": "interface",
            "sourceCode": "export interface Image {\r\n  imageId?: string;\r\n  url: string;\r\n  voters: { [key: number]: string };\r\n}\r\n",
            "properties": [
                {
                    "name": "imageId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "voters",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Post",
            "id": "interface-Post-b249f7453b97a198c5e9d792bf396b33",
            "file": "src/app/posts/model/post.ts",
            "type": "interface",
            "sourceCode": "import { Image } from './image';\r\nimport { User } from './user';\r\n\r\nexport interface Post {\r\n  postId?: string;\r\n  additionDate?: any;\r\n  question?: string;\r\n  images?: { [key: number]: Image };\r\n  // images?: Image[];\r\n  addedByUser?: User;\r\n  imageIds?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "addedByUser",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "additionDate",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "imageIds",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "images",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "postId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "question",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PostRequest",
            "id": "interface-PostRequest-f71a1c10d15561ab32dc7462513636b0",
            "file": "src/app/posts/model/post-request.ts",
            "type": "interface",
            "sourceCode": "export interface PostRequest {\r\n  question: string;\r\n  imageIds: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "imageIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "question",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PostsState",
            "id": "interface-PostsState-181b8f8e06b92289ef580db89ce027a7",
            "file": "src/app/store/reducers/reducers.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { Post } from '../../posts/model/post';\r\nimport {\r\n  actionCreatePost,\r\n  actionCreatePostDone,\r\n  actionDeleteLastPostDone,\r\n  actionDeletePostDone,\r\n  actionDownvotePostImageDone,\r\n  actionGetAllPosts,\r\n  actionGetAllPostsDone,\r\n  actionUpvotePostImageDone,\r\n} from '../actions/actions';\r\n\r\nexport interface PostsState {\r\n  entities: { [id: string]: Post };\r\n  loading: boolean;\r\n}\r\n\r\nexport const initialState: PostsState = {\r\n  entities: {},\r\n  loading: false,\r\n};\r\n\r\nexport const postsReducer = createReducer<PostsState>(\r\n  initialState,\r\n  on(actionGetAllPosts, (state, action) => {\r\n    return { ...state, loading: true };\r\n  }),\r\n  on(actionGetAllPostsDone, (state, action) => {\r\n    const newEntities = {};\r\n    action.posts.forEach((post) => (newEntities[post.postId] = post));\r\n    // const newEntities: { [id: string]: Post } = action.posts.reduce((acc, curr: Post) => (acc[curr.id] = curr), {});\r\n\r\n    return { ...state, entities: newEntities, loading: false };\r\n  }),\r\n  on(actionCreatePost, (state, action) => {\r\n    return { ...state, loading: true };\r\n  }),\r\n  on(actionCreatePostDone, (state, action) => {\r\n    return { ...state, loading: false };\r\n  }),\r\n  on(actionDeleteLastPostDone, (state, action) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    delete newState.entities[action.removedId];\r\n    newState.loading = false;\r\n    return newState;\r\n  }),\r\n  on(actionUpvotePostImageDone, (state, action) => {\r\n    return { ...state };\r\n  }),\r\n  on(actionDownvotePostImageDone, (state, action) => {\r\n    // const newState: PostsState = JSON.parse(JSON.stringify(state));\r\n    // const i = newState.entities[action.post.postId].images[action.imageId].voters.indexOf(action.userId);\r\n    // newState.entities[action.post.postId].images[action.imageId].voters.splice(i, 1);\r\n    return { ...state, loading: false };\r\n  }),\r\n  on(actionDeletePostDone, (state, action) => {\r\n    return { ...state };\r\n  })\r\n);\r\n",
            "properties": [
                {
                    "name": "entities",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-2340b8df51f68003a710f210e763033f",
            "file": "src/app/posts/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  uid: string;\r\n  email: string;\r\n  displayName?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "uid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-28307c54802a886262e71454c003af42",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "user$",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createUserWithEmailAndPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signInWithEmailOrUsername",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signInWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../posts/model/user';\r\nimport { auth } from 'firebase';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  readonly user$: Observable<User>;\r\n\r\n  constructor(private angularFireAuth: AngularFireAuth) {\r\n    this.user$ = this.angularFireAuth.user;\r\n  }\r\n\r\n  async signOut() {\r\n    await this.angularFireAuth.signOut();\r\n    location.reload();\r\n  }\r\n\r\n  signInWithEmailOrUsername(email: string, password: string) {\r\n    return this.angularFireAuth.signInWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  createUserWithEmailAndPassword(email: string, password: string) {\r\n    return this.angularFireAuth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  signInWithGoogle() {\r\n    return this.angularFireAuth.signInWithPopup(new auth.GoogleAuthProvider());\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "angularFireAuth",
                        "type": "AngularFireAuth"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "angularFireAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FirebasePostService",
            "id": "injectable-FirebasePostService-39d603126200514292ec03be0235129d",
            "file": "src/app/posts/services/firebase-post.service.ts",
            "properties": [
                {
                    "name": "posts$",
                    "defaultValue": "this.angularFireDatabase.list<Post>('/posts')",
                    "type": "AngularFireList<Post>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [
                {
                    "name": "addImagesToPost",
                    "args": [
                        {
                            "name": "imageUrls",
                            "type": "string[]"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "imageUrls",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addVote",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "imageUrls",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageUrls",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPostWithFiles",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "files",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "files",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteImages",
                    "args": [
                        {
                            "name": "downloadUrls",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "downloadUrls",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePostById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "getPostById",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post>",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVoters",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remoteVote",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImages",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { EMPTY, from, Observable, of } from 'rxjs';\r\nimport { map, mergeMap, switchMap, take, tap, toArray } from 'rxjs/operators';\r\nimport { AngularFireDatabase, AngularFireList } from '@angular/fire/database';\r\nimport * as firebase from 'firebase';\r\nimport { User } from 'firebase';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { PostService } from './post.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { AngularFireStorage } from '@angular/fire/storage';\r\nimport { Image } from '../model/image';\r\nimport { Post } from '../model/post';\r\n\r\n@Injectable()\r\nexport class FirebasePostService implements PostService {\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private angularFireDatabase: AngularFireDatabase,\r\n    private authService: AuthService,\r\n    private angularFireStorage: AngularFireStorage,\r\n    private utilsService: UtilsService\r\n  ) {}\r\n\r\n  posts$: AngularFireList<Post> = this.angularFireDatabase.list<Post>('/posts');\r\n\r\n  getAll(): Observable<Post[]> {\r\n    return this.posts$.snapshotChanges().pipe(\r\n      map((changes) => {\r\n        return changes.map((c) => ({ postId: c.payload.key, ...c.payload.val() }));\r\n      })\r\n    );\r\n  }\r\n\r\n  createPost(post: Post, imageUrls: string[]): Observable<any> {\r\n    return this.authService.user$.pipe(\r\n      switchMap((user: User) => {\r\n        const newPost: Post = {\r\n          ...post,\r\n          additionDate: firebase.database.ServerValue.TIMESTAMP,\r\n          addedByUser: {\r\n            uid: user.uid,\r\n            email: user.email,\r\n            displayName: user.displayName,\r\n          },\r\n        };\r\n        return from(this.posts$.push(newPost)).pipe(\r\n          tap((x) => {\r\n            this.addImagesToPost(imageUrls, x.key);\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  deletePostById(id: string): Observable<any> {\r\n    return from(this.angularFireDatabase.object('/posts/' + id).remove());\r\n  }\r\n\r\n  updatePost(post: Post): Observable<any> {\r\n    return from(this.angularFireDatabase.object('/posts/' + post.postId).update(post));\r\n  }\r\n\r\n  getVoters(postId: string, imageId: string): Observable<string[]> {\r\n    return this.angularFireDatabase\r\n      .list<string>('/posts/' + postId + '/images/' + imageId + '/voters')\r\n      .valueChanges();\r\n  }\r\n\r\n  remoteVote(postId: string, imageId: string, userId: string): Observable<any> {\r\n    const path = '/posts/' + postId + '/images/' + imageId + '/voters';\r\n    return this.angularFireDatabase\r\n      .list(path, (ref) => ref.orderByValue().equalTo(userId))\r\n      .stateChanges()\r\n      .pipe(\r\n        take(1),\r\n        switchMap((x) => {\r\n          return this.angularFireDatabase.list(path).remove(x.key);\r\n        })\r\n      );\r\n  }\r\n\r\n  addVote(postId: string, imageId: string, userId: string): Observable<any> {\r\n    return of(\r\n      this.angularFireDatabase.list('/posts/' + postId + '/images/' + imageId + '/voters/').push(userId)\r\n    );\r\n  }\r\n\r\n  deletePost(postId: string): Observable<any> {\r\n    return from(this.angularFireDatabase.object('/posts/' + postId).remove());\r\n  }\r\n\r\n  deleteImages(downloadUrls: string[]): Observable<any> {\r\n    downloadUrls.forEach((downloadUrl) => this.angularFireStorage.storage.refFromURL(downloadUrl).delete());\r\n    return of({});\r\n  }\r\n\r\n  uploadImages(files: File[]): Observable<string[]> {\r\n    return from(files).pipe(\r\n      mergeMap((file) =>\r\n        from(this.angularFireStorage.upload(Math.random().toString(36).substring(2), file)).pipe(\r\n          mergeMap((angularFireUploadTask) => from(angularFireUploadTask.ref.getDownloadURL()))\r\n        )\r\n      ),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  createPostWithFiles(post: Post, files: File[]): Observable<any> {\r\n    return this.uploadImages(files).pipe(\r\n      take(1),\r\n      mergeMap((downloadUrls: string[]) => {\r\n        return this.createPost(post, downloadUrls);\r\n      })\r\n    );\r\n  }\r\n\r\n  getPostById(postId: string): Observable<Post> {\r\n    return this.angularFireDatabase\r\n      .object('/posts/' + postId)\r\n      .snapshotChanges()\r\n      .pipe(\r\n        map((action) => {\r\n          const val: Post = action.payload.val();\r\n          return { ...val, postId: action.key };\r\n        })\r\n      );\r\n  }\r\n\r\n  addImagesToPost(imageUrls: string[], postId: string): Observable<any> {\r\n    imageUrls.forEach((imageUrl) =>\r\n      this.angularFireDatabase.list<Image>('/posts/' + postId + '/images').push({ url: imageUrl, voters: [] })\r\n    );\r\n    return EMPTY;\r\n  }\r\n\r\n  removePost(post: Post): Observable<any> {\r\n    const downloadUrls = Object.values(post.images || []).map((images) => images.url);\r\n    return this.deleteImages(downloadUrls).pipe(mergeMap(() => this.deletePostById(post.postId)));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "angularFireDatabase",
                        "type": "AngularFireDatabase"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "angularFireStorage",
                        "type": "AngularFireStorage"
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "angularFireDatabase",
                        "type": "AngularFireDatabase",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "angularFireStorage",
                        "type": "AngularFireStorage",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PostEffects",
            "id": "injectable-PostEffects-42bd2568d727c361f9e79e63f73341dc",
            "file": "src/app/store/effects/effects.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { EMPTY } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { Post } from '../../posts/model/post';\r\nimport { PostsState } from '../reducers/reducers';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectNthPost } from '../selectors/selectors';\r\nimport {\r\n  actionClickPostImage,\r\n  actionCreatePost,\r\n  actionCreatePostDone,\r\n  actionDeletePost,\r\n  actionDeletePostDone,\r\n  actionDownvotePostImage,\r\n  actionDownvotePostImageDone,\r\n  actionGetAllPosts,\r\n  actionGetAllPostsDone,\r\n  actionUpvotePostImage,\r\n  actionUpvotePostImageDone,\r\n  emptyAction,\r\n} from '../actions/actions';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PostEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private store$: Store<PostsState>,\r\n    private authService: AuthService,\r\n    private utilsService: UtilsService\r\n  ) {}\r\n  //\r\n  // getAllPosts$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionGetAllPosts),\r\n  //     switchMap(() =>\r\n  //       this.postService.getAll().pipe(\r\n  //         map((posts: Post[]) => actionGetAllPostsDone({ posts })),\r\n  //         catchError((err) => {\r\n  //           console.error(err);\r\n  //           return EMPTY;\r\n  //         })\r\n  //       )\r\n  //     )\r\n  //   )\r\n  // );\r\n  //\r\n  // createPost$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionCreatePost),\r\n  //     switchMap((action) =>\r\n  //       this.postService.uploadImages(action.files).pipe(\r\n  //         mergeMap((downloadUrls: string[]) => {\r\n  //           return this.postService.createPost(action.post, downloadUrls);\r\n  //         })\r\n  //       )\r\n  //     ),\r\n  //     map(() => actionCreatePostDone()),\r\n  //     catchError((err) => {\r\n  //       console.error(err);\r\n  //       return EMPTY;\r\n  //     })\r\n  //   )\r\n  // );\r\n  //\r\n  // clickImage$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionClickPostImage),\r\n  //     switchMap((action) =>\r\n  //       this.authService.user$\r\n  //         .pipe(withLatestFrom(this.store$.select(selectNthPost, { id: action.post.postId })))\r\n  //         .pipe(\r\n  //           map(([user, post]) => {\r\n  //             if (this.utilsService.hasUserVotedForPost(user, post)) {\r\n  //               if (this.utilsService.hasUserVotedForImageInPost(user, post, action.imageId)) {\r\n  //                 return actionDownvotePostImage({\r\n  //                   imageId: action.imageId,\r\n  //                   post: action.post,\r\n  //                   userId: user.uid,\r\n  //                 });\r\n  //               } else {\r\n  //                 // return emptyAction();\r\n  //               }\r\n  //             } else {\r\n  //               return actionUpvotePostImage({\r\n  //                 imageId: action.imageId,\r\n  //                 post: action.post,\r\n  //                 userId: user.uid,\r\n  //               });\r\n  //             }\r\n  //           })\r\n  //         )\r\n  //     ),\r\n  //     catchError((err) => {\r\n  //       console.error(err);\r\n  //       return EMPTY;\r\n  //     })\r\n  //   )\r\n  // );\r\n  //\r\n  // downvoteImage$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionDownvotePostImage),\r\n  //     switchMap((action) => {\r\n  //       return this.authService.user$.pipe(\r\n  //         switchMap((user) => {\r\n  //           const newPost: Post = JSON.parse(JSON.stringify(action.post));\r\n  //           // const index = newPost.images[action.imageId].voters.indexOf(user.uid);\r\n  //           // newPost.images[action.imageId].voters.splice(index, 1);\r\n  //           return this.postService.updatePost(newPost).pipe(\r\n  //             map((whatigot) => {\r\n  //               // console.log(whatigot, 'whatigot');\r\n  //               // const newPost: Post = JSON.parse(JSON.stringify(action.post));\r\n  //               // newPost.images[action.imageId].voters.push(user.uid);\r\n  //               return actionDownvotePostImageDone();\r\n  //             }),\r\n  //             catchError((err) => {\r\n  //               console.error(err);\r\n  //               return EMPTY;\r\n  //             })\r\n  //           );\r\n  //         })\r\n  //       );\r\n  //     })\r\n  //   )\r\n  // );\r\n  // upvoteImage$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionUpvotePostImage),\r\n  //     switchMap((action) => {\r\n  //       return this.authService.user$.pipe(\r\n  //         switchMap((user) => {\r\n  //           const newPost: Post = JSON.parse(JSON.stringify(action.post));\r\n  //           if (!newPost.images[action.imageId].voters) {\r\n  //             newPost.images[action.imageId].voters = [];\r\n  //           }\r\n  //           // newPost.images[action.imageId].voters[user.uid);\r\n  //           return this.postService.updatePost(newPost).pipe(\r\n  //             map(() => {\r\n  //               return actionUpvotePostImageDone({\r\n  //                 imageId: action.imageId,\r\n  //                 post: newPost,\r\n  //                 userId: user.uid,\r\n  //               });\r\n  //             }),\r\n  //             catchError((err) => {\r\n  //               console.error(err);\r\n  //               return EMPTY;\r\n  //             })\r\n  //           );\r\n  //         })\r\n  //       );\r\n  //     })\r\n  //   )\r\n  // );\r\n  // deletePost$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionDeletePost),\r\n  //     switchMap((action) => {\r\n  //       return this.authService.user$.pipe(\r\n  //         switchMap((user) => {\r\n  //           return this.postService.deletePost(action.post).pipe(\r\n  //             map(() => {\r\n  //               return actionDeletePostDone();\r\n  //             }),\r\n  //             catchError((err) => {\r\n  //               console.error(err);\r\n  //               return EMPTY;\r\n  //             })\r\n  //           );\r\n  //         })\r\n  //       );\r\n  //     })\r\n  //   )\r\n  // );\r\n  // reload$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(actionCreatePostDone, actionUpvotePostImageDone, actionDownvotePostImageDone, actionDeletePost),\r\n  //     map(() => {\r\n  //       return actionGetAllPosts();\r\n  //     }),\r\n  //     catchError((err) => {\r\n  //       console.error(err);\r\n  //       return EMPTY;\r\n  //     })\r\n  //   )\r\n  // );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "store$",
                        "type": "Store<PostsState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store$",
                        "type": "Store<PostsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RestPostService",
            "id": "injectable-RestPostService-1354937bd743af7484fda7f46eef9bbe",
            "file": "src/app/posts/services/rest-post.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addImagesToPost",
                    "args": [
                        {
                            "name": "imageUrls",
                            "type": "string[]"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "imageUrls",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addVote",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "imageUrls",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageUrls",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPost2",
                    "args": [
                        {
                            "name": "postRequest",
                            "type": "PostRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "postRequest",
                            "type": "PostRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPostWithFiles",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "files",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "files",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePostById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "getPostById",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post>",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVoters",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remoteVote",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImages",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Post } from '../model/post';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap, pluck, switchMap, tap } from 'rxjs/operators';\r\nimport { User } from '../model/user';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { Image } from '../model/image';\r\nimport { PostService } from './post.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { PostRequest } from '../model/post-request';\r\n\r\n@Injectable()\r\nexport class RestPostService implements PostService {\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private authService: AuthService,\r\n    private utilsService: UtilsService\r\n  ) {}\r\n\r\n  getAll(): Observable<Post[]> {\r\n    return this.httpClient.get<Post[]>('/api/posts');\r\n  }\r\n\r\n  createPost(post: Post, imageUrls): Observable<any> {\r\n    const postRequest: PostRequest = {\r\n      question: post.question,\r\n      imageIds: imageUrls,\r\n    };\r\n\r\n    return this.createPost2(postRequest);\r\n  }\r\n\r\n  createPost2(postRequest: PostRequest): Observable<any> {\r\n    return this.httpClient.post<Post>('/api/posts', postRequest);\r\n  }\r\n\r\n  deletePostById(id: string): Observable<any> {\r\n    return this.httpClient.delete('/api/posts/' + id);\r\n  }\r\n\r\n  updatePost(post: Post): Observable<any> {\r\n    return this.httpClient.put('/api/posts/' + post.postId, post);\r\n  }\r\n\r\n  getVoters(postId: string, imageId: string): Observable<string[]> {\r\n    return this.httpClient.get('/api/posts' + postId).pipe(\r\n      pluck('images'),\r\n      map((images: { [key: number]: Image }) => {\r\n        const image: Image = images[imageId];\r\n        return Object.values(image.voters);\r\n      })\r\n    );\r\n  }\r\n\r\n  remoteVote(postId: string, imageId: string, userId: string): Observable<any> {\r\n    const path = '/posts/' + postId + '/images/' + imageId + '/voters';\r\n    return this.httpClient.delete('/api' + path);\r\n  }\r\n\r\n  addVote(postId: string, imageId: string, userId: string): Observable<any> {\r\n    const path = '/posts/' + postId + '/images/' + imageId + '/voters/' + userId;\r\n    return this.httpClient.post('/api' + path, userId);\r\n  }\r\n\r\n  deletePost(postId: string): Observable<any> {\r\n    return this.httpClient.delete('/api/posts/' + postId);\r\n  }\r\n\r\n  uploadImages(files: File[]): Observable<string[]> {\r\n    const formData = new FormData();\r\n    files.forEach((file) => formData.append('files', file));\r\n    return this.httpClient.post<string[]>('/api/images/image', formData);\r\n  }\r\n\r\n  createPostWithFiles(post: Post, files: File[]): Observable<any> {\r\n    return this.uploadImages(files).pipe(\r\n      mergeMap((imageIds: string[]) => {\r\n        return this.createPost(post, imageIds);\r\n      })\r\n    );\r\n  }\r\n\r\n  getPostById(postId: string): Observable<Post> {\r\n    return this.httpClient.get('/api/posts/' + postId);\r\n  }\r\n\r\n  addImagesToPost(imageUrls: string[], postId: string): Observable<any> {\r\n    return of({});\r\n  }\r\n\r\n  removePost(post: Post): Observable<any> {\r\n    return this.httpClient.delete('api/posts/' + post.postId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-4e023b4d6d2cf4fc5b9becf71193053f",
            "file": "src/app/services/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "hasUserVotedForImage",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        },
                        {
                            "name": "image",
                            "type": "Image"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "Image",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasUserVotedForImageInPost",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        },
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasUserVotedForPost",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        },
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { User } from '../posts/model/user';\r\nimport { Post } from '../posts/model/post';\r\nimport { Image } from '../posts/model/image';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UtilsService {\r\n  constructor() {}\r\n\r\n  hasUserVotedForPost(user: User, post: Post): boolean {\r\n    if (!post.images) {\r\n      return false;\r\n    }\r\n    return Object.keys(post.images).some((imageId) =>\r\n      this.hasUserVotedForImage(user.uid, post.images[imageId])\r\n    );\r\n  }\r\n\r\n  hasUserVotedForImage(userId: string, image: Image): boolean {\r\n    if (!image.voters) {\r\n      return false;\r\n    }\r\n    return Object.keys(image.voters).some((voteId) => image.voters[voteId] === userId);\r\n  }\r\n\r\n  hasUserVotedForImageInPost(user: User, post: Post, imageId: string) {\r\n    return this.hasUserVotedForImage(user.uid, post.images[imageId]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-fb2365835281102df61c4471872ade69",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<\r\n      string\r\n    >;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PostService",
            "id": "class-PostService-4af5d0302458bd8d631115949c1e45dc",
            "file": "src/app/posts/services/post.service.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Post } from '../model/post';\n\nexport abstract class PostService {\n  abstract getAll(): Observable<Post[]>;\n\n  abstract createPost(post: Post, imageUrls: string[]): Observable<any>;\n\n  abstract deletePostById(id: string): Observable<any>;\n\n  abstract updatePost(post: Post): Observable<any>;\n\n  abstract getVoters(postId: string, imageId: string): Observable<string[]>;\n\n  abstract remoteVote(postId: string, imageId: string, userId: string): Observable<any>;\n\n  abstract addVote(postId: string, imageId: string, userId: string): Observable<any>;\n\n  abstract deletePost(postId: string): Observable<any>;\n\n  abstract uploadImages(files: File[]): Observable<string[]>;\n\n  abstract createPostWithFiles(post: Post, files: File[]): Observable<any>;\n\n  abstract getPostById(postId: string): Observable<Post>;\n\n  abstract addImagesToPost(imageUrls: string[], postId: string): Observable<any>;\n\n  abstract removePost(post: Post): Observable<any>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "addImagesToPost",
                    "args": [
                        {
                            "name": "imageUrls",
                            "type": "string[]"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageUrls",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addVote",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "imageUrls",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageUrls",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPostWithFiles",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "files",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "files",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePostById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getPostById",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVoters",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remoteVote",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImages",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b13e2975961cf0d111f6fb414391545a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AuthService } from './services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(translate: TranslateService, public authService: AuthService) {\r\n    // this language will be used as a fallback when a translation isn't found in the current language\r\n    translate.setDefaultLang('en');\r\n\r\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\r\n    translate.use('en');\r\n  }\r\n\r\n  signOut(): void {\r\n    this.authService.signOut();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-container {\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n}\r\n\r\n.user-profile {\r\n  margin-left: auto;\r\n  font-size: 0.5em;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-toolbar>\r\n  <button aria-label=\"Example icon-button with menu icon\" class=\"example-icon\" mat-icon-button>\r\n    <mat-icon>menu</mat-icon>\r\n  </button>\r\n  <span>Pick a pic</span>\r\n  <span *ngIf=\"authService.user$ | async as user\" class=\"user-profile\">{{ user.email }}</span>\r\n  <button\r\n    (click)=\"signOut()\"\r\n    *ngIf=\"authService.user$ | async\"\r\n    [matTooltip]=\"'buttons.signOut' | translate\"\r\n    aria-label=\"Button that displays a tooltip that hides when scrolled out of the container\"\r\n    class=\"example-icon favorite-icon\"\r\n    mat-icon-button\r\n  >\r\n    <mat-icon>exit_to_app</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<div class=\"app-container\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PostElementComponent",
            "id": "component-PostElementComponent-5cec52a550b1a925ac4b0f7860918ae4",
            "file": "src/app/posts/post-element/post-element.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-element",
            "styleUrls": [
                "./post-element.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-element.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "post",
                    "line": 15,
                    "type": "Post"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickedImageWithId",
                    "defaultValue": "new EventEmitter<{ post: Post; imageId: string }>()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<Post>()",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "downVoteImage",
                    "defaultValue": "new EventEmitter<{ postId: string; imageId: string }>()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "upvoteImage",
                    "defaultValue": "new EventEmitter<{ postId: string; imageId: string }>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getImagesAsList",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "Image[]",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVoteCount",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        },
                        {
                            "name": "imageId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Post } from '../model/post';\r\nimport { Image } from '../model/image';\r\n\r\n@Component({\r\n  selector: 'app-post-element',\r\n  templateUrl: './post-element.component.html',\r\n  styleUrls: ['./post-element.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PostElementComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  post: Post;\r\n\r\n  @Output()\r\n  clickedImageWithId = new EventEmitter<{ post: Post; imageId: string }>();\r\n\r\n  @Output()\r\n  upvoteImage = new EventEmitter<{ postId: string; imageId: string }>();\r\n\r\n  @Output()\r\n  downVoteImage = new EventEmitter<{ postId: string; imageId: string }>();\r\n\r\n  @Output()\r\n  delete = new EventEmitter<Post>();\r\n\r\n  ngOnInit(): void {}\r\n\r\n  getVoteCount(post: Post, imageId: string): number {\r\n    let count = 0;\r\n    if (post.images[imageId].voters) {\r\n      Object.values(post.images[imageId].voters).forEach((vote) => {\r\n        if (vote) {\r\n          count += 1;\r\n        }\r\n      });\r\n    }\r\n    return count;\r\n  }\r\n\r\n  getImagesAsList(post: Post): Image[] {\r\n    if (!post || !post.images) {\r\n      return [];\r\n    } else {\r\n      return Object.keys(post.images).map((key) => ({ ...post.images[key], imageId: key }));\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .mat-card-title {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    .user-avatar-photo {\r\n      background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n      background-size: cover;\r\n      margin-right: 1rem;\r\n    }\r\n\r\n    .delete-button {\r\n      margin-left: auto;\r\n      color: darkgray;\r\n      transition: color 1000ms ease;\r\n\r\n      &:hover {\r\n        color: unset;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.upvoted {\r\n  box-shadow: 0 4px 2px -2px red, 0 2px 2px 0 red, 0 2px 6px 0 red;\r\n}\r\n\r\n.left-right {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .thumbs-up {\r\n    cursor: pointer;\r\n    position: relative;\r\n    width: 48%;\r\n\r\n    img {\r\n      width: 100%;\r\n      transform: translateY(2px);\r\n    }\r\n\r\n    .thumbs-up-counter {\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      cursor: pointer;\r\n      min-width: 48px;\r\n      color: white;\r\n      position: absolute;\r\n      bottom: 0;\r\n      right: 0;\r\n      z-index: 2;\r\n\r\n      &:hover {\r\n        transform: scale(1.1);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./post-element.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\r\n  <mat-card-header class=\"header\">\r\n    <mat-card-title>\r\n      <div\r\n        mat-card-avatar\r\n        class=\"user-avatar-photo\"\r\n        [matTooltip]=\"post.addedByUser.displayName ? post.addedByUser.displayName : post.addedByUser.email\"\r\n      ></div>\r\n      <span>{{ post.question }}</span>\r\n      <button class=\"delete-button\" mat-icon-button aria-label=\"delete icon\" (click)=\"delete.next(post)\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </mat-card-title>\r\n\r\n    <mat-card-subtitle>\r\n      <span>{{ 'at' | translate }} {{ post.additionDate | date: 'medium' }} </span>\r\n    </mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-content class=\"left-right\">\r\n    <div\r\n      class=\"thumbs-up\"\r\n      *ngFor=\"let image of getImagesAsList(post); let i = index\"\r\n      [ngClass]=\"{ upvoted: false }\"\r\n    >\r\n      <img\r\n        [src]=\"image.url\"\r\n        alt=\"image uploaded by user {{ post.addedByUser.email }}, imageId={{ image.imageId }}\"\r\n        [ngClass]=\"\"\r\n      />\r\n      <span\r\n        class=\"thumbs-up-counter\"\r\n        (click)=\"clickedImageWithId.next({ post: post, imageId: image.imageId })\"\r\n      >\r\n        <mat-icon>thumb_up</mat-icon>\r\n        {{ getVoteCount(post, image.imageId) }}</span\r\n      >\r\n    </div>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n"
        },
        {
            "name": "PostsListComponent",
            "id": "component-PostsListComponent-770ed111e285ced71d70f9179bf6e271",
            "file": "src/app/posts/posts-list/posts-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-posts-list",
            "styleUrls": [
                "./posts-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./posts-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "posts$",
                    "type": "Observable<Post[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "profileForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "utilsService",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downvoteImageWithPostIdAndImageId",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downvoteOrUpvote",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllPosts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "upvoteImage",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { Post } from '../model/post';\r\nimport { Store } from '@ngrx/store';\r\nimport { PostsState } from '../../store/reducers/reducers';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { PostService } from '../services/post.service';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-posts-list',\r\n  templateUrl: './posts-list.component.html',\r\n  styleUrls: ['./posts-list.component.scss'],\r\n})\r\nexport class PostsListComponent implements OnInit {\r\n  posts$: Observable<Post[]>;\r\n  isLoading$: Observable<boolean>;\r\n  profileForm: FormGroup;\r\n\r\n  constructor(\r\n    private store: Store<PostsState>,\r\n    public utilsService: UtilsService,\r\n    private postService: PostService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.profileForm = new FormGroup({ a: new FormControl() });\r\n    this.posts$ = this.postService.getAll();\r\n    this.getAllPosts();\r\n  }\r\n\r\n  createPost($event: { post: Post; files: File[] }): void {\r\n    this.postService\r\n      .createPostWithFiles($event.post, $event.files)\r\n      .subscribe(() => (this.posts$ = this.postService.getAll()));\r\n  }\r\n\r\n  getAllPosts() {\r\n    this.posts$ = this.postService.getAll();\r\n  }\r\n\r\n  deletePost(post: Post) {\r\n    this.postService.removePost(post).subscribe(() => (this.posts$ = this.postService.getAll()));\r\n  }\r\n\r\n  upvoteImage($event: { postId: string; imageId: string }): void {\r\n    this.authService.user$\r\n      .pipe(\r\n        map((user) => {\r\n          return this.postService.addVote($event.postId, $event.imageId, user.uid);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  downvoteImageWithPostIdAndImageId($event: { postId: string; imageId: string }): void {\r\n    this.authService.user$\r\n      .pipe(\r\n        map((user) => {\r\n          this.postService.remoteVote($event.postId, $event.imageId, user.uid);\r\n          return EMPTY;\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  downvoteOrUpvote($event: { post: Post; imageId: string }) {\r\n    this.authService.user$\r\n      .pipe(\r\n        switchMap((user) => {\r\n          if (!this.utilsService.hasUserVotedForPost(user, $event.post)) {\r\n            return this.postService.addVote($event.post.postId, $event.imageId, user.uid);\r\n          } else {\r\n            if (this.utilsService.hasUserVotedForImageInPost(user, $event.post, $event.imageId)) {\r\n              return this.postService.remoteVote($event.post.postId, $event.imageId, user.uid);\r\n            }\r\n          }\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".posts-container {\r\n  margin: 32px 0;\r\n  display: grid;\r\n  grid-gap: 32px;\r\n}\r\n\r\nmat-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nmat-spinner {\r\n  display: block;\r\n  margin: 0 auto;\r\n}\r\n",
                    "styleUrl": "./posts-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<PostsState>"
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService"
                    },
                    {
                        "name": "postService",
                        "type": "PostService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<PostsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-post-submission-form (submitForm)=\"createPost($event)\"></app-post-submission-form>\n<div *ngIf=\"posts$ | async as posts; else noPosts\" class=\"posts-container\">\n  <app-post-element\n    [post]=\"post\"\n    (delete)=\"deletePost($event)\"\n    (upvoteImage)=\"upvoteImage($event)\"\n    (downVoteImage)=\"downvoteImageWithPostIdAndImageId($event)\"\n    (clickedImageWithId)=\"downvoteOrUpvote($event)\"\n    *ngFor=\"let post of posts\"\n  ></app-post-element>\n</div>\n<ng-template #noPosts>\n  <p>{{ 'noPostsFound' | translate }}</p>\n</ng-template>\n<mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n"
        },
        {
            "name": "PostSubmissionFormComponent",
            "id": "component-PostSubmissionFormComponent-d889c4c0bf67cd698c8d9aaf1f09e113",
            "file": "src/app/posts/post-submission-form/post-submission-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-submission-form",
            "styleUrls": [
                "./post-submission-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-submission-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({ question: new FormControl() })",
                    "line": 17,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter<{ post: Post; files: File[] }>()",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "type": "File[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "createPost",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "file",
                            "type": "File"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "$event",
                            "type": "NgxDropzoneChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "NgxDropzoneChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Post } from '../model/post';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { NgxDropzoneChangeEvent } from 'ngx-dropzone';\r\n\r\n@Component({\r\n  selector: 'app-post-submission-form',\r\n  templateUrl: './post-submission-form.component.html',\r\n  styleUrls: ['./post-submission-form.component.scss'],\r\n})\r\nexport class PostSubmissionFormComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  files: File[] = [];\r\n\r\n  @Input()\r\n  formGroup: FormGroup = new FormGroup({ question: new FormControl() });\r\n\r\n  @Output()\r\n  submitForm = new EventEmitter<{ post: Post; files: File[] }>();\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onSelect($event: NgxDropzoneChangeEvent) {\r\n    this.files.push(...$event.addedFiles);\r\n  }\r\n\r\n  onRemove(file: File) {\r\n    this.files.splice(this.files.indexOf(file), 1);\r\n  }\r\n\r\n  createPost() {\r\n    const post: Post = { question: this.formGroup.get('question').value };\r\n    this.submitForm.next({ post, files: this.files });\r\n    this.formGroup.reset();\r\n    this.files = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".post-creation-form {\r\n  box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14),\r\n    0 1px 3px 0 rgba(0, 0, 0, 0.12);\r\n  margin: 32px 0;\r\n  padding: 16px;\r\n}\r\n\r\nbutton[type='submit'] {\r\n  margin-top: 16px;\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./post-submission-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form (submit)=\"createPost()\" [formGroup]=\"formGroup\" class=\"post-creation-form\">\n  <mat-form-field>\n    <mat-label>{{ 'question' | translate }}</mat-label>\n    <input matInput formControlName=\"question\" />\n  </mat-form-field>\n  <ngx-dropzone (change)=\"onSelect($event)\" [multiple]=\"true\" accept=\"image/*\">\n    <ngx-dropzone-label>{{ 'clickToUploadImages' | translate }}</ngx-dropzone-label>\n    <ngx-dropzone-image-preview\n      ngProjectAs=\"ngx-dropzone-preview\"\n      *ngFor=\"let f of files\"\n      [file]=\"f\"\n      (removed)=\"onRemove(f)\"\n      [removable]=\"true\"\n    >\n    </ngx-dropzone-image-preview>\n  </ngx-dropzone>\n  <button mat-stroked-button type=\"submit\">{{ 'post' | translate }}</button>\n</form>\n"
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-87d35baeae13d4657f7da497bf8b7a73",
            "file": "src/app/signin/sign-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in",
            "styleUrls": [
                "./sign-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isSignUpFormVisible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "signInFormGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "signIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "signInWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.scss'],\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  errorMessage: string;\r\n  isSignUpFormVisible: boolean;\r\n  signInFormGroup: FormGroup;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private angularFirestore: AngularFirestore,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.signInFormGroup = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n    });\r\n  }\r\n\r\n  signIn(): void {\r\n    if (this.signInFormGroup.valid) {\r\n      this.authService\r\n        .signInWithEmailOrUsername(\r\n          this.signInFormGroup.get('email').value,\r\n          this.signInFormGroup.get('password').value\r\n        )\r\n        .then((result) => {\r\n          this.router.navigate(['']);\r\n        })\r\n        .catch((error) => {\r\n          this.errorMessage = error.message;\r\n        });\r\n    }\r\n  }\r\n\r\n  signInWithGoogle(): void {\r\n    this.authService\r\n      .signInWithGoogle()\r\n      .then((result) => {\r\n        this.router.navigate(['']);\r\n      })\r\n      .catch((error) => {\r\n        this.errorMessage = error.message;\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sign-in-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10%;\r\n\r\n  .sign-in-form {\r\n    width: 400px;\r\n    box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14),\r\n      0 1px 3px 0 rgba(0, 0, 0, 0.12);\r\n    padding: 20px;\r\n\r\n    form {\r\n      display: block;\r\n    }\r\n\r\n    .error-message {\r\n      background-color: crimson;\r\n      color: white;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./sign-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sign-in-container\">\r\n  <form [formGroup]=\"signInFormGroup\" (submit)=\"signIn()\" class=\"sign-in-form\">\r\n    <p class=\"error-message\" *ngIf=\"errorMessage\">{{ errorMessage }}</p>\r\n\r\n    <mat-form-field>\r\n      <mat-label>{{ 'email' | translate }}</mat-label>\r\n      <input matInput formControlName=\"email\" placeholder=\"Ex. pat@example.com\" email />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-label>{{ 'password' | translate }}</mat-label>\r\n      <input matInput formControlName=\"password\" type=\"password\" />\r\n    </mat-form-field>\r\n    <footer class=\"sign-in-buttons-footer\">\r\n      <button mat-stroked-button color=\"primary\" type=\"submit\">\r\n        {{ 'buttons.signIn' | translate }}\r\n      </button>\r\n      <button mat-stroked-button color=\"primary\" type=\"button\" (click)=\"signInWithGoogle()\">\r\n        {{ 'buttons.signInWithGoogle' | translate }}\r\n      </button>\r\n      <p>No account yet? <a routerLink=\"/sign-up\" mat-button>Sign up</a></p>\r\n    </footer>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-fca49edaa1aa219b02927140d36a62f0",
            "file": "src/app/signup/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "signUpFormGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  errorMessage: string;\r\n  signUpFormGroup: FormGroup;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private angularFirestore: AngularFirestore,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.signUpFormGroup = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n    });\r\n  }\r\n\r\n  signUp(): void {\r\n    this.authService\r\n      .createUserWithEmailAndPassword(\r\n        this.signUpFormGroup.get('email').value,\r\n        this.signUpFormGroup.get('password').value\r\n      )\r\n      .then((result) => {\r\n        this.router.navigate(['']);\r\n      })\r\n      .catch((error) => {\r\n        this.errorMessage = error.message;\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sign-up-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10%;\r\n\r\n  .sign-up-form {\r\n    width: 400px;\r\n    box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14),\r\n      0 1px 3px 0 rgba(0, 0, 0, 0.12);\r\n    padding: 20px;\r\n\r\n    form {\r\n      display: block;\r\n\r\n      footer {\r\n        display: flex;\r\n        justify-content: space-between;\r\n\r\n        > button {\r\n          display: block;\r\n        }\r\n      }\r\n    }\r\n\r\n    .error-message {\r\n      background-color: crimson;\r\n      color: white;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sign-up-container\">\r\n  <form [formGroup]=\"signUpFormGroup\" (submit)=\"signUp()\" class=\"sign-up-form\">\r\n    <p class=\"error-message\" *ngIf=\"errorMessage\">{{ errorMessage }}</p>\r\n\r\n    <mat-form-field>\r\n      <mat-label>{{ 'email' | translate }}</mat-label>\r\n      <input matInput formControlName=\"email\" placeholder=\"Ex. pat@example.com\" email />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-label>{{ 'password' | translate }}</mat-label>\r\n      <input matInput formControlName=\"password\" type=\"password\" />\r\n    </mat-form-field>\r\n    <footer class=\"sign-up-buttons-footer\">\r\n      <button mat-stroked-button color=\"primary\" type=\"submit\">\r\n        {{ 'buttons.signUp' | translate }}\r\n      </button>\r\n      <p>Already have an account? <a routerLink=\"/sign-in\" mat-button>Sign in</a></p>\r\n    </footer>\r\n  </form>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "SignInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "[firebase]"
                        },
                        {
                            "name": "[ngrx]"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PostElementComponent"
                        },
                        {
                            "name": "PostSubmissionFormComponent"
                        },
                        {
                            "name": "PostsListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PostsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionClickPostImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] actionClickPostImage',\r\n  props<{ post: Post; imageId: string }>()\r\n)"
            },
            {
                "name": "actionClickPostImageDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] actionClickPostImageDone',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
            },
            {
                "name": "actionCreatePost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Add one post', props<{ post: Post; files: File[] }>())"
            },
            {
                "name": "actionCreatePostDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Add one post done')"
            },
            {
                "name": "actionDeleteLastPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Delete Last Post')"
            },
            {
                "name": "actionDeleteLastPostDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Delete Last Post Done',\r\n  props<{ removedId: string }>()\r\n)"
            },
            {
                "name": "actionDeleteNthPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Delete Nth Post', props<{ id: string }>())"
            },
            {
                "name": "actionDeleteNthPostDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Delete Nth Post Done', props<{ post: Post }>())"
            },
            {
                "name": "actionDeleteNthPostError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Delete Last Post Error')"
            },
            {
                "name": "actionDeletePost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] actionDeletePost', props<{ post: Post }>())"
            },
            {
                "name": "actionDeletePostDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] actionDeletePostDone')"
            },
            {
                "name": "actionDownvotePostImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] actionDownvotePostImage',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
            },
            {
                "name": "actionDownvotePostImageDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] actionDownvotePostImageDone'\r\n  // props<{ imageId: string; post: Post; userId: string }>()\r\n)"
            },
            {
                "name": "actionDownvotePostImageFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] actionDownvotePostImageFailed')"
            },
            {
                "name": "actionGetAllPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Get All Posts')"
            },
            {
                "name": "actionGetAllPostsDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] actionGetAllPostsDone', props<{ posts: Post[] }>())"
            },
            {
                "name": "actionUpvotePostImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] actionUpvotePostImage',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
            },
            {
                "name": "actionUpvotePostImageDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] actionUpvotePostImageDone',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/material/material.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatToolbarModule,\r\n  MatCardModule,\r\n  MatTooltipModule,\r\n  MatProgressSpinnerModule,\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/karmaTest.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "emptyAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/actions.ts",
                "type": "",
                "defaultValue": "createAction('[Post] Empty action')"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  firebaseConfig: {\r\n    apiKey: 'AIzaSyDaShPqQFdE8kGzHw29rJAZ4XmcScboRt8',\r\n    authDomain: 'this-or-that-b045e.firebaseapp.com',\r\n    databaseURL: 'https://this-or-that-b045e.firebaseio.com',\r\n    projectId: 'this-or-that-b045e',\r\n    storageBucket: 'this-or-that-b045e.appspot.com',\r\n    messagingSenderId: '195463027271',\r\n    appId: '1:195463027271:web:2f7d0565dcd11806696f62',\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: 'AIzaSyDaShPqQFdE8kGzHw29rJAZ4XmcScboRt8',\r\n    authDomain: 'this-or-that-b045e.firebaseapp.com',\r\n    databaseURL: 'https://this-or-that-b045e.firebaseio.com',\r\n    projectId: 'this-or-that-b045e',\r\n    storageBucket: 'this-or-that-b045e.appspot.com',\r\n    messagingSenderId: '195463027271',\r\n    appId: '1:195463027271:web:2f7d0565dcd11806696f62',\r\n  },\r\n}"
            },
            {
                "name": "firebase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  AngularFireModule.initializeApp(environment.firebaseConfig),\r\n  AngularFirestoreModule,\r\n  AngularFireAuthModule,\r\n  AngularFireStorageModule,\r\n]"
            },
            {
                "name": "getPostsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<PostsState>('posts')"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/reducers.ts",
                "type": "PostsState",
                "defaultValue": "{\r\n  entities: {},\r\n  loading: false,\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ngrx",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  StoreModule.forRoot({ posts: postsReducer }),\r\n  StoreDevtoolsModule.instrument({ maxAge: 10 }),\r\n  EffectsModule.forRoot([PostEffects]),\r\n]"
            },
            {
                "name": "postsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "createReducer<PostsState>(\r\n  initialState,\r\n  on(actionGetAllPosts, (state, action) => {\r\n    return { ...state, loading: true };\r\n  }),\r\n  on(actionGetAllPostsDone, (state, action) => {\r\n    const newEntities = {};\r\n    action.posts.forEach((post) => (newEntities[post.postId] = post));\r\n    // const newEntities: { [id: string]: Post } = action.posts.reduce((acc, curr: Post) => (acc[curr.id] = curr), {});\r\n\r\n    return { ...state, entities: newEntities, loading: false };\r\n  }),\r\n  on(actionCreatePost, (state, action) => {\r\n    return { ...state, loading: true };\r\n  }),\r\n  on(actionCreatePostDone, (state, action) => {\r\n    return { ...state, loading: false };\r\n  }),\r\n  on(actionDeleteLastPostDone, (state, action) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    delete newState.entities[action.removedId];\r\n    newState.loading = false;\r\n    return newState;\r\n  }),\r\n  on(actionUpvotePostImageDone, (state, action) => {\r\n    return { ...state };\r\n  }),\r\n  on(actionDownvotePostImageDone, (state, action) => {\r\n    // const newState: PostsState = JSON.parse(JSON.stringify(state));\r\n    // const i = newState.entities[action.post.postId].images[action.imageId].voters.indexOf(action.userId);\r\n    // newState.entities[action.post.postId].images[action.imageId].voters.splice(i, 1);\r\n    return { ...state, loading: false };\r\n  }),\r\n  on(actionDeletePostDone, (state, action) => {\r\n    return { ...state };\r\n  })\r\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/karmaTest.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectIsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "type": "",
                "defaultValue": "createSelector(getPostsState, (state: PostsState) => {\r\n  return state.loading;\r\n})"
            },
            {
                "name": "selectLastPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "type": "",
                "defaultValue": "createSelector(getPostsState, (state: PostsState) => {\r\n  const lastId = Object.keys(state.entities).length;\r\n  return state.entities[lastId];\r\n})"
            },
            {
                "name": "selectNthPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "type": "",
                "defaultValue": "createSelector(getPostsState, (state: PostsState, props: { id: string }) => {\r\n  return state.entities[props.id];\r\n})"
            },
            {
                "name": "selectPostsAsArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/selectors.ts",
                "type": "",
                "defaultValue": "createSelector(getPostsState, (state: PostsState) => {\r\n  return Object.keys(state.entities).map((i) => state.entities[i]);\r\n})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "createTranslateLoader",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/store/actions/actions.ts": [
                {
                    "name": "actionClickPostImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] actionClickPostImage',\r\n  props<{ post: Post; imageId: string }>()\r\n)"
                },
                {
                    "name": "actionClickPostImageDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] actionClickPostImageDone',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
                },
                {
                    "name": "actionCreatePost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Add one post', props<{ post: Post; files: File[] }>())"
                },
                {
                    "name": "actionCreatePostDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Add one post done')"
                },
                {
                    "name": "actionDeleteLastPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Delete Last Post')"
                },
                {
                    "name": "actionDeleteLastPostDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Delete Last Post Done',\r\n  props<{ removedId: string }>()\r\n)"
                },
                {
                    "name": "actionDeleteNthPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Delete Nth Post', props<{ id: string }>())"
                },
                {
                    "name": "actionDeleteNthPostDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Delete Nth Post Done', props<{ post: Post }>())"
                },
                {
                    "name": "actionDeleteNthPostError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Delete Last Post Error')"
                },
                {
                    "name": "actionDeletePost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] actionDeletePost', props<{ post: Post }>())"
                },
                {
                    "name": "actionDeletePostDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] actionDeletePostDone')"
                },
                {
                    "name": "actionDownvotePostImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] actionDownvotePostImage',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
                },
                {
                    "name": "actionDownvotePostImageDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] actionDownvotePostImageDone'\r\n  // props<{ imageId: string; post: Post; userId: string }>()\r\n)"
                },
                {
                    "name": "actionDownvotePostImageFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] actionDownvotePostImageFailed')"
                },
                {
                    "name": "actionGetAllPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Get All Posts')"
                },
                {
                    "name": "actionGetAllPostsDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] actionGetAllPostsDone', props<{ posts: Post[] }>())"
                },
                {
                    "name": "actionUpvotePostImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] actionUpvotePostImage',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
                },
                {
                    "name": "actionUpvotePostImageDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] actionUpvotePostImageDone',\r\n  props<{ imageId: string; post: Post; userId: string }>()\r\n)"
                },
                {
                    "name": "emptyAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Post] Empty action')"
                }
            ],
            "src/app/shared/material/material.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/material/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatToolbarModule,\r\n  MatCardModule,\r\n  MatTooltipModule,\r\n  MatProgressSpinnerModule,\r\n]"
                }
            ],
            "src/karmaTest.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/karmaTest.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/karmaTest.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  firebaseConfig: {\r\n    apiKey: 'AIzaSyDaShPqQFdE8kGzHw29rJAZ4XmcScboRt8',\r\n    authDomain: 'this-or-that-b045e.firebaseapp.com',\r\n    databaseURL: 'https://this-or-that-b045e.firebaseio.com',\r\n    projectId: 'this-or-that-b045e',\r\n    storageBucket: 'this-or-that-b045e.appspot.com',\r\n    messagingSenderId: '195463027271',\r\n    appId: '1:195463027271:web:2f7d0565dcd11806696f62',\r\n  },\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: 'AIzaSyDaShPqQFdE8kGzHw29rJAZ4XmcScboRt8',\r\n    authDomain: 'this-or-that-b045e.firebaseapp.com',\r\n    databaseURL: 'https://this-or-that-b045e.firebaseio.com',\r\n    projectId: 'this-or-that-b045e',\r\n    storageBucket: 'this-or-that-b045e.appspot.com',\r\n    messagingSenderId: '195463027271',\r\n    appId: '1:195463027271:web:2f7d0565dcd11806696f62',\r\n  },\r\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "firebase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  AngularFireModule.initializeApp(environment.firebaseConfig),\r\n  AngularFirestoreModule,\r\n  AngularFireAuthModule,\r\n  AngularFireStorageModule,\r\n]"
                },
                {
                    "name": "ngrx",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  StoreModule.forRoot({ posts: postsReducer }),\r\n  StoreDevtoolsModule.instrument({ maxAge: 10 }),\r\n  EffectsModule.forRoot([PostEffects]),\r\n]"
                }
            ],
            "src/app/store/selectors/selectors.ts": [
                {
                    "name": "getPostsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<PostsState>('posts')"
                },
                {
                    "name": "selectIsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(getPostsState, (state: PostsState) => {\r\n  return state.loading;\r\n})"
                },
                {
                    "name": "selectLastPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(getPostsState, (state: PostsState) => {\r\n  const lastId = Object.keys(state.entities).length;\r\n  return state.entities[lastId];\r\n})"
                },
                {
                    "name": "selectNthPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(getPostsState, (state: PostsState, props: { id: string }) => {\r\n  return state.entities[props.id];\r\n})"
                },
                {
                    "name": "selectPostsAsArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(getPostsState, (state: PostsState) => {\r\n  return Object.keys(state.entities).map((i) => state.entities[i]);\r\n})"
                }
            ],
            "src/app/store/reducers/reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/reducers.ts",
                    "type": "PostsState",
                    "defaultValue": "{\r\n  entities: {},\r\n  loading: false,\r\n}"
                },
                {
                    "name": "postsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<PostsState>(\r\n  initialState,\r\n  on(actionGetAllPosts, (state, action) => {\r\n    return { ...state, loading: true };\r\n  }),\r\n  on(actionGetAllPostsDone, (state, action) => {\r\n    const newEntities = {};\r\n    action.posts.forEach((post) => (newEntities[post.postId] = post));\r\n    // const newEntities: { [id: string]: Post } = action.posts.reduce((acc, curr: Post) => (acc[curr.id] = curr), {});\r\n\r\n    return { ...state, entities: newEntities, loading: false };\r\n  }),\r\n  on(actionCreatePost, (state, action) => {\r\n    return { ...state, loading: true };\r\n  }),\r\n  on(actionCreatePostDone, (state, action) => {\r\n    return { ...state, loading: false };\r\n  }),\r\n  on(actionDeleteLastPostDone, (state, action) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    delete newState.entities[action.removedId];\r\n    newState.loading = false;\r\n    return newState;\r\n  }),\r\n  on(actionUpvotePostImageDone, (state, action) => {\r\n    return { ...state };\r\n  }),\r\n  on(actionDownvotePostImageDone, (state, action) => {\r\n    // const newState: PostsState = JSON.parse(JSON.stringify(state));\r\n    // const i = newState.entities[action.post.postId].images[action.imageId].voters.indexOf(action.userId);\r\n    // newState.entities[action.post.postId].images[action.imageId].voters.splice(i, 1);\r\n    return { ...state, loading: false };\r\n  }),\r\n  on(actionDeletePostDone, (state, action) => {\r\n    return { ...state };\r\n  })\r\n)"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "createTranslateLoader",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ngrx",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/model/image.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/model/post-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/model/post.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/post-element/post-element.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostElementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/post-submission-form/post-submission-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostSubmissionFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/posts-list/posts-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/firebase-post.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirebasePostService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/post.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PostService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/rest-post.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RestPostService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/material/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/signin/sign-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/signup/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionClickPostImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionClickPostImageDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionCreatePost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionCreatePostDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeleteLastPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeleteLastPostDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeleteNthPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeleteNthPostDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeleteNthPostError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeletePost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDeletePostDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDownvotePostImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDownvotePostImageDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionDownvotePostImageFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionGetAllPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionGetAllPostsDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionUpvotePostImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionUpvotePostImageDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostsState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPostsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNthPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsAsArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/karmaTest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/karmaTest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}